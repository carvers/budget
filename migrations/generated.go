// Code generated by go-bindata.
// sources:
// sql/20180124_init.sql
// sql/20180126_add_accounts.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql20180124_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\xc1\x6f\xd3\x30\x14\xc6\xcf\xf1\x5f\xe1\x63\x2b\x32\x89\x01\xb7\x9d\xb2\x2d\x82\x08\x3a\x4a\x48\x91\xc6\xc5\x7a\xb3\x5f\x57\xab\x8d\x1d\xbd\x38\x65\xf9\xef\x51\x16\x95\x39\x76\xca\xb4\x53\x94\xdf\xf7\xd9\xcf\xcf\xef\x93\x2f\x2e\xf8\xbb\x5a\x3f\x12\x38\xe4\x9b\x86\xdd\x94\x79\x56\xe5\xbc\xca\xae\xbf\xe5\xdc\x6e\x9f\x84\x23\x30\x2d\x48\xa7\xad\x69\xf9\x82\x25\x5a\xf1\x5f\x59\x79\xf3\x25\x2b\x53\x96\xb4\xb6\x23\x89\x11\x10\x20\xa5\xed\x8c\x13\x33\xe6\x7f\x9a\xeb\x1b\x7f\xa5\x57\x27\x94\x14\x38\x14\x8d\x6d\x1d\x2a\x5e\x15\xab\xfc\x67\x95\xad\xd6\xd5\xef\x93\xd2\xb5\x48\x73\x1c\x8e\xa0\x0f\xf0\x70\xc0\x40\x84\x7a\xa8\xcf\xaf\x8b\xcf\xc5\x5d\x95\xb2\x64\xab\x85\x9b\x1e\x14\xe9\x88\x14\x40\xb9\x43\xb9\x17\xa6\xab\x3d\x46\xb8\x0d\x48\xab\xe5\xcb\xc6\x0d\xf4\x88\xd3\x3b\x30\x50\xfb\x9d\xe1\x93\x43\xa3\x50\x89\x80\xd7\x58\x5b\xef\x57\x9b\xa3\xf8\xf4\xfe\x72\x2f\xa2\xfb\x96\x1d\x11\x1a\xd9\x7b\xc8\x92\x7e\xd4\x06\x0e\x62\x46\x93\x96\x08\xa5\x13\x51\xcb\x27\x61\x1c\x80\x27\x8c\x3d\x04\xc7\x1b\x21\x28\x45\x97\xb3\xf4\xc3\x2c\xfd\x18\x51\xa9\x5d\x1f\xc1\xd6\x0d\x51\x0c\xe9\x30\xfe\xa1\x27\xab\x62\xed\x39\x4f\x14\xef\xd4\xec\xac\xf1\xdd\x0f\x60\xf6\x2f\xf1\xb3\xe2\xf9\x7f\x72\x0d\x91\x83\xc0\xc8\xdd\xff\x3d\xb3\x59\x3f\x67\x0a\x92\x7d\xce\xb6\xc7\xc9\xd4\x08\x95\x76\x42\x02\xa9\x57\x0b\xbf\xe2\x9d\x6c\xcc\x92\x75\x59\xac\xb2\xf2\x9e\x7f\xcd\xef\x17\x5a\xa5\x7c\xcc\xd7\xe9\xeb\x55\x88\xd0\xd0\xc8\x32\x65\xc9\xe6\xae\xf8\xb1\xc9\x17\x6f\x5b\x98\xf2\x31\x80\x4b\xb6\xbc\x62\xcc\x7f\x81\x6e\xed\x1f\xc3\x6e\xcb\xef\xeb\x33\x2f\xd0\x15\xfb\x1b\x00\x00\xff\xff\x65\x4e\x6e\xc3\xb0\x04\x00\x00")

func sql20180124_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20180124_initSql,
		"sql/20180124_init.sql",
	)
}

func sql20180124_initSql() (*asset, error) {
	bytes, err := sql20180124_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20180124_init.sql", size: 1200, mode: os.FileMode(436), modTime: time.Unix(1516946318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql20180126_add_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd1\xc1\x6e\xc3\x20\x0c\x06\xe0\x73\xfc\x14\x3e\xb6\x5a\xfa\x04\x39\xb1\x04\x69\xd5\xd2\xa4\x62\x74\x52\x4f\x88\x25\xb4\x42\x5d\x21\x03\xa2\xad\x6f\x3f\x65\xa3\x1a\x4d\xcf\x3b\x21\x7d\xb2\xec\xdf\x66\xb5\xc2\x87\xb3\x3e\x3a\x19\x14\xee\x06\x28\x19\x25\x9c\x22\x27\x8f\x35\x45\xd9\x75\x76\x34\xc1\xe3\x02\x32\xdd\x63\x96\xbd\x12\x56\x3e\x11\x96\x43\x66\xe4\x59\xdd\x40\xac\x15\xe1\x32\x28\x4c\xdc\xa9\x8f\x51\xf9\x5f\x4f\xf8\x4d\x9a\x93\xb0\xee\x38\xa7\x83\xee\xe7\x34\xba\xf7\x84\xb6\x6c\xbd\x21\x6c\x8f\xcf\x74\xbf\xd0\xfd\x12\x96\x05\x00\xa9\x39\x65\x31\xb3\x3d\x7c\x89\xe0\xa4\xf1\xb2\x0b\xda\x1a\x8f\x15\x6b\xb7\x58\xb6\xcd\x0b\x67\x64\xdd\xf0\xbb\x02\x31\x9c\xd4\x25\x87\x8c\x54\x15\x26\xcd\x71\xea\x1e\xb9\x6c\xeb\xdd\xa6\xb9\x9e\x43\xe8\x1e\x63\x9e\x02\x20\xbd\x5f\x65\x3f\x0d\xfc\xcc\xbb\xbd\x5f\xf1\x6f\x09\x73\xf4\x76\x74\x9d\xba\xbe\xe2\x2f\xe3\x1d\x4d\x3f\x30\x6d\x14\xc7\xcd\x56\x2a\xe0\x3b\x00\x00\xff\xff\x67\xde\xa9\x16\x0a\x02\x00\x00")

func sql20180126_add_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20180126_add_accountsSql,
		"sql/20180126_add_accounts.sql",
	)
}

func sql20180126_add_accountsSql() (*asset, error) {
	bytes, err := sql20180126_add_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20180126_add_accounts.sql", size: 522, mode: os.FileMode(436), modTime: time.Unix(1517040375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/20180124_init.sql": sql20180124_initSql,
	"sql/20180126_add_accounts.sql": sql20180126_add_accountsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"20180124_init.sql": &bintree{sql20180124_initSql, map[string]*bintree{}},
		"20180126_add_accounts.sql": &bintree{sql20180126_add_accountsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

